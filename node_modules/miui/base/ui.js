'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * @file 组件公共基础类
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * - 提供公共属性/方法定义
                                                                                                                                                                                                                                                                               */

/**
 * 只有webpack支持自动样式导入，cdn打包不包括这部分，需要手动配置
 *
 * - smicon 引入地址
 * https://unpkg.com/smicon@0.0.1/style.css
 * - skin 引入地址
 * https://unpkg.com/smui/skin.css
 */


var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (window.webpackJsonp) {
    require(['smicon/style.css']);
    require(['../style/skin.less']);
}

// require('smicon/style.css')
// require('../style/skin.less')

var MODEL_EVENT = 'model-change';
var skinName = 'jinyang';

function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}

var ui = {
    props: ['params', 'model'],
    skinName: skinName,
    i18n: _i18n2.default,
    mixins: [],
    model: {
        prop: 'model',
        event: MODEL_EVENT
    },
    data: function data() {
        var skin = window.UI_SKIN || ui.skinName;
        var params = {
            skinName: skin,
            clazz: ['msui', skinName],
            uiType: 'msui',
            isInputing: false,
            value: '',
            uid: Math.floor(Math.random() * 100).toString(32),
            syncModel: true, // 是否v-model自动双向同步
            storeValue: false,
            VueVersion: 1
        };

        // params 主要是对外可访问的数据，传入参数
        if (this.$options.params) {
            Object.assign(params, deepClone(this.$options.params));
        }

        // private 用于表示内部状态数据
        if (this.$options.private) {
            Object.assign(params, this.$options.private);
        }

        return params;
    },
    beforeMount: function beforeMount() {
        this.VueVersion = 2; // 只有vue2.0才会触发的钩子
    },
    mounted: function mounted() {
        this.__initComp.call();
    },
    compiled: function compiled() {
        this.__initComp.call();
    },
    ready: function ready() {
        this.__isReady = true;
    },

    watch: {
        params: {
            handler: function handler(value) {
                this.setOptions(value);
            },

            deep: true
        },
        value: function value(_value) {
            /*
             * 注意:
             *
             * 1. 通过watch方法绑定的，会比实际触发慢一拍
             * 2. watch属性不能在computed中被watch第二次
             */
            if (this.syncModel) {
                this.$emit(MODEL_EVENT, _value);
            }
        },
        model: function model(value) {
            // 为了实现双向同步
            if (this.key) {
                this[this.key] = value;
            } else {
                this.value = value;
            }
        }
    },
    methods: {
        __initComp: function __initComp() {
            var _this = this;

            if (this.__isReady) {
                return;
            }
            this.prepare();
            if (this.$options.ready) {
                var fns = [].concat(this.$options.ready);
                fns.forEach(function (fn) {
                    fn.call(_this);
                });
            }

            // 如果是输入型控件: v-model 双向绑定字段
            // <date-picker v-model="dateRager"></date-picker>
            var modelValue = this.model;
            if (this.$el && this.$el.hasOwnProperty('_value')) {
                // 兼容2.1.x
                this.isInputing = true;
                // 2.1只能用input实现
                MODEL_EVENT = 'input';
                modelValue = this.$el._value;
            } else if (!this.isInputing && modelValue === undefined) {
                this.isInputing = false;
            } else {
                this.isInputing = true;
            }
            if (this.isInputing) {
                var val = modelValue;
                var kay = this.key || 'value';
                // 注意null表示用默认取值，采用组件更新取值
                if (val !== null) {
                    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
                        // 如果绑定输入的是对象，输出的必须也是对象
                        this.key = null;
                        this.setOptions(val);
                        // 用于存储对象状态，比如翻页、地域
                        this.storeValue = val;
                    }
                    if (val !== undefined) {
                        this.value = val;
                    }
                } else if (this.hasOwnProperty(kay)) {
                    this.$emit(MODEL_EVENT, this[kay]);
                }
            }
        },
        prepare: function prepare() {
            if (this.params) {
                this.setOptions(this.params);
            }
            // 为所有组件挂载统一的class
            if (this.$el && this.$el.classList) {
                this.$el.classList.add('smui');
                this.$el.classList.add(this.skinName);
                if (this.uiType) {
                    this.$el.classList.add(this.uiType);
                }
            }
            this.__ready = true;
        },
        emit: function emit(type, data) {
            // 提供统一的事件出口, 统一数据格式
            this.$emit(type, { data: data });

            // 如果是输入型组件，传出的参数就是取值
            if (this.isInputing) {
                var kay = this.key || 'value';
                if (this.storeValue && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
                    if (this.key && data.hasOwnProperty(kay)) {
                        this.value = data[kay];
                        this.storeValue = this.value;
                    }
                }
                if (data && data.hasOwnProperty(kay)) {
                    this.$emit(MODEL_EVENT, data[kay]);
                }
            }
        },
        setOptions: function setOptions(params) {
            // 设置统一的参数入口
            Object.assign(this, params);
        }
    }
};

exports.default = ui;